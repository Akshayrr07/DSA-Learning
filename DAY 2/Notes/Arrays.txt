Arrays
    Definition
        An array is a data structure that can hold a fixed number of elements of the same data type. 
        The elements are stored in contiguous memory locations.

    Properties
        - Fixed size: The size of an array is determined at the time of creation and cannot be changed.
        - Homogeneous elements: All elements in an array are of the same data type.
        - Indexed: Each element in an array is identified by an index, starting from 0.
        - Contiguous memory allocation: Elements are stored in consecutive memory locations.

    Advantages
        - Fast access: Elements can be accessed directly using their index, providing O(1) time complexity for access.
        - Easy to traverse: Arrays can be easily traversed using loops.
        - Memory efficiency: Arrays have a low memory overhead compared to other data structures like linked lists.

    Disadvantages
        - Fixed size: The size of an array cannot be changed once it is created, which can lead to wasted memory or insufficient space.
        - Insertion and deletion: Inserting or deleting elements can be inefficient, as it may require shifting elements.
        - Homogeneous elements: Arrays can only store elements of the same data type, which can be limiting in some cases.

    Types of Arrays
        - One-dimensional array: A linear array where elements are stored in a single row.
        - Multi-dimensional array: An array of arrays, where elements are stored in a grid or matrix format.
            - Two-dimensional array: Elements are stored in a table with rows and columns.
            - Three-dimensional array: Elements are stored in a 3D grid.

1D Arrays
    Definition
        A one-dimensional array, also known as a linear array, is a list of elements that are stored in a single row.
    
    Application
        - Storing a list of items such as numbers, characters, or objects.
        - Used in algorithms that require a linear data structure, such as searching and sorting.
        - Useful in scenarios where fixed-size collections of elements are needed.

    Example Problems
        - Finding the maximum or minimum element in an array.
        - Sorting the elements of an array in ascending or descending order.
        - Merging two arrays into one.
        - Removing duplicates from an array.
        - Rotating an array to the left or right.
        - Finding the sum of all elements in an array.
