Trees

Definition:
A tree is a hierarchical data structure that consists of nodes connected by edges. It starts with a root node and expands into subtrees formed by child nodes. Trees are widely used in computer science for representing hierarchical relationships, such as file systems, organizational structures, and more.

Terminologies:
- **Root**: The topmost node in the tree.
- **Parent**: A node that has one or more child nodes.
- **Child**: A node that is directly connected to another node when moving away from the root.
- **Leaf**: A node with no children.
- **Height**: The number of edges on the longest path from the root to a leaf.
- **Depth**: The number of edges from the root to a specific node.
- **Subtree**: A tree consisting of a node and its descendants.

Operations:
1. **Traversal**:
   - **In-order Traversal**: Visit the left subtree, the root, and then the right subtree.
   - **Pre-order Traversal**: Visit the root, then the left subtree, and finally the right subtree.
   - **Post-order Traversal**: Visit the left subtree, the right subtree, and then the root.
   - **Level-order Traversal**: Visit nodes level by level from top to bottom.

2. **Insertion**: Add a new node to the tree while maintaining its properties.

3. **Deletion**: Remove a node from the tree and restructure it if necessary.

4. **Search**: Find a node with a specific value in the tree.

Types:
1. **Binary Tree**: A tree where each node has at most two children, referred to as the left child and the right child.
2. **Binary Search Tree (BST)**: A binary tree where the left child contains values less than the parent node, and the right child contains values greater than the parent node.
3. **AVL Tree**: A self-balancing binary search tree where the difference in heights of the left and right subtrees of any node is at most one.
4. **Red-Black Tree**: A self-balancing binary search tree where nodes are colored red or black to ensure balance during insertions and deletions.
5. **N-ary Tree**: A tree where each node can have at most N children.
6. **Trie**: A tree used for storing strings, where each node represents a character of the string.
7. **Heap**: A special tree-based data structure that satisfies the heap property (e.g., max-heap or min-heap).

Traversal techniques:
Traversal is the process of visiting all the nodes in a tree in a specific order. The main traversal techniques are:
1. **In-order Traversal**: Visit the left subtree, the root, and then the right subtree. Commonly used in binary search trees to retrieve elements in sorted order.

   Example:
   ```
       4
      / \
     2   5
    / \
   1   3
   ```
   In-order: 1 → 2 → 3 → 4 → 5

2. **Pre-order Traversal**: Visit the root, then the left subtree, and finally the right subtree. Useful for creating a copy of the tree or prefix expressions.

   Example:
   ```
       4
      / \
     2   5
    / \
   1   3
   ```
   Pre-order: 4 → 2 → 1 → 3 → 5

3. **Post-order Traversal**: Visit the left subtree, the right subtree, and then the root. Often used for deleting the tree or postfix expressions.

   Example:
   ```
       4
      / \
     2   5
    / \
   1   3
   ```
   Post-order: 1 → 3 → 2 → 5 → 4

4. **Level-order Traversal**: Visit nodes level by level from top to bottom. Implemented using a queue and is useful for breadth-first search.

   Example:
   ```
       4
      / \
     2   5
    / \
   1   3
   ```
   Level-order: 4 → 2 → 5 → 1 → 3

5. **Depth-First Search (DFS)**: Explore as far as possible along each branch before backtracking. It can be implemented using recursion or a stack.

   Example:
   ```
       4
      / \
     2   5
    / \
   1   3
   ```
   DFS (Pre-order): 4 → 2 → 1 → 3 → 5

6. **Breadth-First Search (BFS)**: Explore all the nodes at the present depth level before moving on to the nodes at the next depth level. It is implemented using a queue.

   Example:
   ```
       4
      / \
     2   5
    / \
   1   3
   ```
   BFS (Level-order): 4 → 2 → 5 → 1 → 3
